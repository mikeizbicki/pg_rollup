create or replace language plpython3u;
create extension if not exists pg_rollup;
NOTICE:  extension "pg_rollup" already exists, skipping
create temporary table test (
    id serial primary key,
    name text,
    num int
);
insert into test (name,num) values
    ('alice', 1),
    ('alice', 2),
    ('alice', 3),
    ('alice', 4),
    ('alice', 5),
    ('bill', 5),
    ('bill', 5),
    ('bill', 5),
    ('charlie', 1),
    ('charlie', 1),
    ('charlie', 1),
    ('charlie', 3),
    ('charlie', NULL),
    ('dave', 4),
    ('elliot', 5),
    (NULL, 1),
    (NULL, 1),
    (NULL, 1),
    (NULL, 1),
    (NULL, 1),
    (NULL, 8),
    (NULL, 9),
    (NULL, NULL),
    (NULL, NULL),
    (NULL, NULL),
    (NULL, NULL);
select create_rollup(
    'test',
    'test_rollup1',
    wheres => 'name'
);
NOTICE:  view "test_rollup1_groundtruth" will be a temporary view
 create_rollup 
---------------
 
(1 row)

select create_rollup(
    'test',
    'test_rollup2',
    wheres => 'name,num'
);
NOTICE:  view "test_rollup2_groundtruth" will be a temporary view
 create_rollup 
---------------
 
(1 row)

select create_rollup(
    'test',
    'test_rollup3',
    wheres => 'name',
    distincts => 'num'
);
NOTICE:  view "test_rollup3_groundtruth" will be a temporary view
 create_rollup 
---------------
 
(1 row)

select create_rollup(
    'test',
    'test_rollup4',
    distincts => 'name,num'
);
NOTICE:  relation "test_index_distinct_num" already exists, skipping
NOTICE:  view "test_rollup4_groundtruth" will be a temporary view
 create_rollup 
---------------
 
(1 row)

select assert_rollup('test_rollup1');
 assert_rollup 
---------------
 
(1 row)

select assert_rollup('test_rollup2');
 assert_rollup 
---------------
 
(1 row)

select assert_rollup('test_rollup3');
 assert_rollup 
---------------
 
(1 row)

select assert_rollup('test_rollup4');
 assert_rollup 
---------------
 
(1 row)

insert into test (name,num) values
    ('alice', 1),
    ('alice', 2),
    ('alice', 3),
    ('alice', 4),
    ('alice', 5),
    ('bill', 5),
    ('bill', 5),
    ('bill', 5),
    ('charlie', 1),
    ('charlie', 1),
    ('charlie', 1),
    ('charlie', 3),
    ('charlie', NULL),
    ('dave', 4),
    ('elliot', 5),
    (NULL, 1),
    (NULL, 1),
    (NULL, 1),
    (NULL, 1),
    (NULL, 1),
    (NULL, 8),
    (NULL, 9),
    (NULL, NULL),
    (NULL, NULL),
    (NULL, NULL),
    (NULL, NULL);
select assert_rollup('test_rollup1');
 assert_rollup 
---------------
 
(1 row)

select assert_rollup('test_rollup2');
 assert_rollup 
---------------
 
(1 row)

select assert_rollup('test_rollup3');
 assert_rollup 
---------------
 
(1 row)

select assert_rollup('test_rollup4');
 assert_rollup 
---------------
 
(1 row)

select drop_rollup('test_rollup1');
NOTICE:  drop cascades to view test_rollup1
NOTICE:  drop cascades to trigger test_rollup1_insert_t_ on table test
NOTICE:  drop cascades to trigger test_rollup1_update_t on table test
NOTICE:  drop cascades to trigger test_rollup1_delete_t on table test
 drop_rollup 
-------------
 
(1 row)

select drop_rollup('test_rollup2');
NOTICE:  drop cascades to view test_rollup2
NOTICE:  drop cascades to trigger test_rollup2_insert_t_ on table test
NOTICE:  drop cascades to trigger test_rollup2_update_t on table test
NOTICE:  drop cascades to trigger test_rollup2_delete_t on table test
 drop_rollup 
-------------
 
(1 row)

select drop_rollup('test_rollup3');
NOTICE:  drop cascades to view test_rollup3
NOTICE:  drop cascades to trigger test_rollup3_insert_t_ on table test
NOTICE:  drop cascades to trigger test_rollup3_update_t on table test
NOTICE:  drop cascades to trigger test_rollup3_delete_t on table test
 drop_rollup 
-------------
 
(1 row)

select drop_rollup('test_rollup4');
NOTICE:  drop cascades to view test_rollup4
NOTICE:  drop cascades to trigger test_rollup4_insert_t_ on table test
NOTICE:  drop cascades to trigger test_rollup4_update_t on table test
NOTICE:  drop cascades to trigger test_rollup4_delete_t on table test
 drop_rollup 
-------------
 
(1 row)

