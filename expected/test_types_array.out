create or replace language plpython3u;
create extension if not exists pg_rollup;
NOTICE:  extension "pg_rollup" already exists, skipping
--
-- this function removes duplicates from an array,
-- and can be used to modify how rollups work with arrays
--
CREATE OR REPLACE FUNCTION array_uniq(a anyarray) RETURNS anyarray AS $$
SELECT ARRAY(SELECT DISTINCT unnest(a));
$$ LANGUAGE 'sql' STRICT IMMUTABLE PARALLEL SAFE;
do $$
BEGIN
    assert( array_uniq('{}'::INT[]) = '{}');
    assert( array_uniq('{1,1,1,1}'::INT[]) = '{1}');
    assert( array_uniq('{1,1,2,3}'::INT[]) = '{1,2,3}');
    assert( array_uniq('{1,2,3,1}'::INT[]) = '{1,2,3}');
    assert( array_uniq('{NULL,NULL}'::INT[]) = '{NULL}');
    assert( array_uniq(NULL::INT[]) IS NULL);
END;
$$;
create temporary table arrtest (
    id serial primary key,
    a int,
    b int[],
    c text,
    d text[]
);
insert into arrtest (a,b,c,d) values
    (0, '{              }', 'foo', '{1,2,3,4       }'),
    (0, '{              }', 'foo', '{2,2,2         }'),
    (0, '{1,2,3,4       }', 'bar', '{              }'),
    (0, '{1,2,3,4       }', 'bar', '{NULL,NULL     }'),
    (0, '{NULL          }', 'foo', '{NULL          }'),
    (0, '{NULL          }', 'foo', '{NULL,5,6      }'),
    (0, '{NULL,5,6      }', 'foo', '{1,2,3,4       }'),
    (0, '{NULL,5,6      }', 'foo', NULL              ),
    (0, '{NULL,NULL     }', 'foo', '{              }'),
    (0, '{NULL,NULL     }', 'foo', '{2,2,2         }'),
    (1, '{2,2,2         }', 'foo', '{NULL          }'),
    (1, '{2,2,2         }', 'baz', NULL              ),
    (2, NULL              , 'baz', '{NULL,5,6      }'),
    (2, NULL              , 'foo', '{NULL,NULL     }'),
    (3, NULL              , 'foo', NULL              );
select create_rollup(
    'arrtest',
    'arrtest_rollup0',
    wheres => $$
        unnest(b)
    $$
);
NOTICE:  view "arrtest_rollup0_groundtruth_raw" will be a temporary view
NOTICE:  view "arrtest_rollup0" will be a temporary view
NOTICE:  view "arrtest_rollup0_groundtruth" will be a temporary view
 create_rollup 
---------------
 
(1 row)

select create_rollup(
    'arrtest',
    'arrtest_rollup1',
    wheres => $$
        unnest(array_uniq(b))
    $$
);
NOTICE:  view "arrtest_rollup1_groundtruth_raw" will be a temporary view
NOTICE:  view "arrtest_rollup1" will be a temporary view
NOTICE:  view "arrtest_rollup1_groundtruth" will be a temporary view
 create_rollup 
---------------
 
(1 row)

select create_rollup(
    'arrtest',
    'arrtest_rollup2',
    wheres => $$
        unnest(array_uniq(d))
    $$
);
NOTICE:  view "arrtest_rollup2_groundtruth_raw" will be a temporary view
NOTICE:  view "arrtest_rollup2" will be a temporary view
NOTICE:  view "arrtest_rollup2_groundtruth" will be a temporary view
 create_rollup 
---------------
 
(1 row)

select create_rollup(
    'arrtest',
    'arrtest_rollup3',
    wheres => $$
        unnest(array_uniq(b)) AS b,
        unnest(array_uniq(d)) AS d
    $$
);
NOTICE:  view "arrtest_rollup3_groundtruth_raw" will be a temporary view
NOTICE:  view "arrtest_rollup3" will be a temporary view
NOTICE:  view "arrtest_rollup3_groundtruth" will be a temporary view
 create_rollup 
---------------
 
(1 row)

select create_rollup(
    'arrtest',
    'arrtest_rollup4',
    wheres => $$
        a,
        unnest(array_uniq(b)) AS b,
        unnest(array_uniq(d)) AS d,
        c
    $$
);
NOTICE:  view "arrtest_rollup4_groundtruth_raw" will be a temporary view
NOTICE:  view "arrtest_rollup4" will be a temporary view
NOTICE:  view "arrtest_rollup4_groundtruth" will be a temporary view
 create_rollup 
---------------
 
(1 row)

select create_rollup(
    'arrtest',
    'arrtest_rollup5',
    wheres => $$
        unnest(array_uniq(b)) AS b,
        unnest(array_uniq(d)) AS d
    $$,
    rollups => $$
        hll(a),
        hll(c)
    $$
);
NOTICE:  view "arrtest_rollup5_groundtruth_raw" will be a temporary view
NOTICE:  view "arrtest_rollup5" will be a temporary view
NOTICE:  view "arrtest_rollup5_groundtruth" will be a temporary view
 create_rollup 
---------------
 
(1 row)

insert into arrtest (a,b,c,d) values
    (0, '{              }', 'foo', '{1,2,3,4       }'),
    (0, '{              }', 'foo', '{2,2,2         }'),
    (0, '{1,2,3,4       }', 'bar', '{              }'),
    (0, '{1,2,3,4       }', 'bar', '{NULL,NULL     }'),
    (0, '{NULL          }', 'foo', '{NULL          }'),
    (0, '{NULL          }', 'foo', '{NULL,5,6      }'),
    (0, '{NULL,5,6      }', 'foo', '{1,2,3,4       }'),
    (0, '{NULL,5,6      }', 'foo', NULL              ),
    (0, '{NULL,NULL     }', 'foo', '{              }'),
    (0, '{NULL,NULL     }', 'foo', '{2,2,2         }'),
    (1, '{2,2,2         }', 'foo', '{NULL          }'),
    (1, '{2,2,2         }', 'baz', NULL              ),
    (2, NULL              , 'baz', '{NULL,5,6      }'),
    (2, NULL              , 'foo', '{NULL,NULL     }'),
    (3, NULL              , 'foo', NULL              );
select assert_rollup('arrtest_rollup0');
 assert_rollup 
---------------
 
(1 row)

select assert_rollup('arrtest_rollup1');
 assert_rollup 
---------------
 
(1 row)

select assert_rollup('arrtest_rollup2');
 assert_rollup 
---------------
 
(1 row)

select assert_rollup('arrtest_rollup3');
 assert_rollup 
---------------
 
(1 row)

select assert_rollup('arrtest_rollup4');
 assert_rollup 
---------------
 
(1 row)

select assert_rollup('arrtest_rollup5');
 assert_rollup 
---------------
 
(1 row)

